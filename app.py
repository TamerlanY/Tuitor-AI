import os
import json
import requests
import streamlit as st

from config import (
    PLAYLISTS, APP_CONFIG, DEEPSEEK_CONFIG, UI_CONFIG,
    # –≠—Ç–∏ –¥–≤–∞ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ config.py ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    # –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏–º –∏–º–ø–æ—Ä—Ç, –∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –æ–±–æ–π–¥—ë–º—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
    # SUPABASE_URL, SUPABASE_ANON_KEY
)

from utils import (
    compare_answers, calculate_score, generate_progress_report,
    get_subject_emoji, SessionManager, create_progress_chart_data,
    log_user_action, diagnose_mistake
)

# ---------- set_page_config –î–û–õ–ñ–ï–ù –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –≤—ã–∑–æ–≤–æ–º ----------
st.set_page_config(
    page_title=UI_CONFIG.get("page_title", "AI –¢—å—é—Ç–æ—Ä"),
    page_icon=UI_CONFIG.get("page_icon", "üìö"),
    layout=UI_CONFIG.get("layout", "wide"),
    initial_sidebar_state=UI_CONFIG.get("initial_sidebar_state", "expanded"),
)

# === –†–ï–ó–û–õ–í–ò–ú –ö–õ–Æ–ß–ò –ü–û–°–õ–ï set_page_config ===
YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
try:
    if (not YOUTUBE_API_KEY) and hasattr(st, "secrets") and "YOUTUBE_API_KEY" in st.secrets:
        YOUTUBE_API_KEY = st.secrets["YOUTUBE_API_KEY"]
    if (not DEEPSEEK_API_KEY) and hasattr(st, "secrets") and "DEEPSEEK_API_KEY" in st.secrets:
        DEEPSEEK_API_KEY = st.secrets["DEEPSEEK_API_KEY"]
except Exception:
    pass

if not YOUTUBE_API_KEY:
    st.error("–ù–µ –∑–∞–¥–∞–Ω YOUTUBE_API_KEY. –£–∫–∞–∂–∏ –≤ .env –∏–ª–∏ –≤ Secrets.")
    st.stop()

DEEPSEEK_ENABLED = bool(DEEPSEEK_API_KEY)

# ---------- MathJax ----------
st.markdown("""
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML"></script>
<script>
    MathJax.Hub.Config({
        tex2jax: { inlineMath: [['\\(', '\\)']], displayMath: [['\\[', '\\]']], processEscapes: true }
    });
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
</script>
""", unsafe_allow_html=True)

# ---------- CSS ----------
st.markdown("""
<style>
.main-header { text-align:center; padding:2rem; background:linear-gradient(90deg,#667eea 0%,#764ba2 100%); border-radius:10px; color:#fff; margin-bottom:2rem; }
.progress-card { background:#fff; padding:1.5rem; border-radius:10px; box-shadow:0 2px 8px rgba(0,0,0,0.1); margin:1rem 0; }
.task-card { background:#f8f9fa; padding:1.5rem; border-radius:8px; border-left:4px solid #007bff; margin:1rem 0; }
.success-animation { animation:pulse 0.5s ease-in-out; }
@keyframes pulse { 0%{transform:scale(1);} 50%{transform:scale(1.05);} 100%{transform:scale(1);} }
.difficulty-badge { display:inline-block; padding:.3rem .8rem; border-radius:15px; font-size:.75rem; font-weight:600; text-transform:uppercase; margin-bottom:.5rem; }
.easy{ background:#d4edda; color:#155724; } .medium{ background:#fff3cd; color:#856404; } .hard{ background:#f8d7da; color:#721c24; }
.notebook-note{ background:#e9f7ef; padding:1rem; border-radius:8px; margin-bottom:1rem; border-left:4px solid #28a745; }
.badge{ display:inline-block; padding:.25rem .5rem; border-radius:6px; font-size:.75rem; font-weight:600; }
.badge-green{ background:#d1fae5; color:#065f46; } .badge-gray{ background:#e5e7eb; color:#374151; }

/* –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ–æ—Ä–∏–∏ */
.choice { padding: .35rem .6rem; border-radius: 6px; margin:.15rem 0; display:inline-block; }
.choice-correct { background:#d1fae5; color:#065f46; }   /* –∑–µ–ª–µ–Ω—ã–π */
.choice-wrong   { background:#fee2e2; color:#991b1b; }   /* –∫—Ä–∞—Å–Ω—ã–π */
</style>
""", unsafe_allow_html=True)


# ======================== –ú–û–î–£–õ–¨ LLM =========================
class EnhancedAITutor:
    def __init__(self):
        self.youtube_api_key = YOUTUBE_API_KEY
        self.deepseek_api_key = DEEPSEEK_API_KEY
        self.playlists = PLAYLISTS
        self.config = APP_CONFIG
        self.deepseek_config = DEEPSEEK_CONFIG
        self.ui_config = UI_CONFIG

    # ---- YouTube ----
    def get_playlist_videos(self, playlist_id: str):
        if not (isinstance(playlist_id, str) and playlist_id.startswith(("PL", "UU", "VL"))):
            st.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–ª–µ–π–ª–∏—Å—Ç–∞: {playlist_id}.")
            log_user_action("invalid_playlist_id", {"playlist_id": playlist_id})
            return []

        url = "https://www.googleapis.com/youtube/v3/playlistItems"
        params = {
            "part": "snippet,contentDetails",
            "playlistId": playlist_id,
            "maxResults": int(self.config.get("youtube_max_results", 50)),
            "key": self.youtube_api_key,
        }
        try:
            r = requests.get(url, params=params, timeout=15)
            r.raise_for_status()
            data = r.json()
            videos = []
            for item in data.get("items", []):
                sn = item.get("snippet", {}) or {}
                thumbs = sn.get("thumbnails", {}) or {}
                thumb = thumbs.get("high") or thumbs.get("medium") or thumbs.get("default") or {}
                video_id = (sn.get("resourceId") or {}).get("videoId")
                if not video_id:
                    continue
                desc = sn.get("description") or ""
                videos.append({
                    "title": sn.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    "video_id": video_id,
                    "description": (desc[:200] + "‚Ä¶") if len(desc) > 200 else desc,
                    "thumbnail": thumb.get("url", ""),
                    "published_at": sn.get("publishedAt", ""),
                })
            log_user_action("playlist_loaded", {"count": len(videos), "playlist_id": playlist_id})
            return videos
        except requests.exceptions.Timeout:
            st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç YouTube API")
            log_user_action("playlist_error", {"error": "timeout", "playlist_id": playlist_id})
            return []
        except requests.exceptions.HTTPError as e:
            st.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e.response.status_code}")
            log_user_action("playlist_error", {"error": str(e), "playlist_id": playlist_id})
            return []
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
            log_user_action("playlist_error", {"error": str(e), "playlist_id": playlist_id})
            return []

    # ---- DeepSeek Base Call ----
    def _call_deepseek_api(self, prompt: str):
        if not DEEPSEEK_ENABLED:
            return {"error": "deepseek_disabled"}
        headers = {"Authorization": f"Bearer {self.deepseek_api_key}", "Content-Type": "application/json"}
        data = {
            "model": self.deepseek_config.get("model", "deepseek-chat"),
            "messages": [{"role": "user", "content": prompt}],
            "temperature": float(self.deepseek_config.get("temperature", 0.7)),
            "max_tokens": int(self.deepseek_config.get("max_tokens", 4000)),
        }
        for attempt in range(int(self.deepseek_config.get("retry_attempts", 3))):
            try:
                resp = requests.post(
                    "https://api.deepseek.com/v1/chat/completions",
                    headers=headers,
                    json=data,
                    timeout=int(self.deepseek_config.get("timeout", 30)),
                )
                if resp.status_code == 402:
                    st.warning("DeepSeek –≤–µ—Ä–Ω—É–ª 402 (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤). –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                    return {"error": "402"}
                resp.raise_for_status()
                result = resp.json()
                content = result["choices"][0]["message"]["content"]
                # –ü–æ–ø—Ä–æ–±—É–µ–º JSON, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—Å—Ç
                try:
                    return json.loads(content)
                except json.JSONDecodeError:
                    return {"content": content}
            except requests.exceptions.Timeout:
                if attempt == int(self.deepseek_config.get("retry_attempts", 3)) - 1:
                    st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API")
                    return {"error": "timeout"}
            except requests.exceptions.HTTPError as e:
                if attempt == int(self.deepseek_config.get("retry_attempts", 3)) - 1:
                    st.error(f"–û—à–∏–±–∫–∞ HTTP DeepSeek API: {e.response.status_code}")
                    return {"error": str(e)}
            except Exception as e:
                if attempt == int(self.deepseek_config.get("retry_attempts", 3)) - 1:
                    st.error(f"–û—à–∏–±–∫–∞ API DeepSeek: {str(e)}")
                    return {"error": str(e)}

    # ---- –¢–µ–æ—Ä–∏—è: —Å—Ç—Ä–æ–≥–æ N –≤–æ–ø—Ä–æ—Å–æ–≤, –±–µ–∑ easy/medium/hard ----
    def generate_theory_questions(self, topic: str, subject: str, grade: str, questions_count: int):
        prompt = f"""
–°–æ–∑–¥–∞–π —Ä–æ–≤–Ω–æ {questions_count} —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ "{topic}" –¥–ª—è {grade}-–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}".

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Å —Ä–æ–≤–Ω–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "A) ...", "B) ...", "C) ...", "D) ..."
- –†–æ–≤–Ω–æ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (A/B/C/D)
- –ö –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —è—Å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
- –§–æ—Ä–º—É–ª—ã —Ç–æ–ª—å–∫–æ –≤ LaTeX: \\( ... \\) –¥–ª—è inline, \\[ ... \\] –¥–ª—è –±–ª–æ—á–Ω—ã—Ö
- –°—Ç—Ä–æ–≥–æ –í–ê–õ–ò–î–ù–´–ô JSON. –ù–∏–∫–∞–∫–∏—Ö –º–Ω–æ–≥–æ—Ç–æ—á–∏–π/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–π JSON (–∑–∞–ø–æ–ª–Ω–∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º):
{{
  "questions": [
    {{
      "question": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å LaTeX –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: \\(...\\)",
      "options": ["A) –≤–∞—Ä–∏–∞–Ω—Ç", "B) –≤–∞—Ä–∏–∞–Ω—Ç", "C) –≤–∞—Ä–∏–∞–Ω—Ç", "D) –≤–∞—Ä–∏–∞–Ω—Ç"],
      "correct_answer": "A",
      "explanation": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å LaTeX –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: \\(...\\)"
    }}
  ]
}}
"""
        return self._call_deepseek_api(prompt)

    # ---- –ü—Ä–∞–∫—Ç–∏–∫–∞ ----
    def generate_practice_tasks(self, topic: str, subject: str, grade: str, user_performance: float | None):
        perf = ""
        if user_performance is not None:
            if user_performance < 60:
                perf = "–°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏."
            elif user_performance > 85:
                perf = "–î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö/–ø–æ–≤—ã—à–µ–Ω–Ω—ã—Ö –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á."
        prompt = f"""
–°–æ—Å—Ç–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ "{topic}" –¥–ª—è {grade}-–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}":
- {self.config["tasks_per_difficulty"]["easy"]} –∑–∞–¥–∞—á–∏ —É—Ä–æ–≤–Ω—è easy
- {self.config["tasks_per_difficulty"]["medium"]} –∑–∞–¥–∞—á–∏ —É—Ä–æ–≤–Ω—è medium
- {self.config["tasks_per_difficulty"]["hard"]} –∑–∞–¥–∞—á–∏ —É—Ä–æ–≤–Ω—è hard

{perf}

–î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –≤–µ—Ä–Ω–∏:
- "question": —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Å LaTeX –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- "answer": —Ç–æ—á–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç/—á–∏—Å–ª–æ/–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã) –ë–ï–ó LaTeX, –Ω–∞–ø—Ä–∏–º–µ—Ä "x >= 2, x < 3"
- "solution": –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ c LaTeX
- "hint": –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ (–±–µ–∑ LaTeX)

–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –º–Ω–æ–≥–æ—Ç–æ—á–∏–π:
{{
  "easy":   [{{"question":"...","answer":"...","solution":"...","hint":"..."}}],
  "medium": [{{"question":"...","answer":"...","solution":"...","hint":"..."}}],
  "hard":   [{{"question":"...","answer":"...","solution":"...","hint":"..."}}]
}}
"""
        return self._call_deepseek_api(prompt)


# ======================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –≠–ö–†–ê–ù–´ =========================
def main():
    st.markdown('<div class="main-header"><h1>üìö AI –¢—å—é—Ç–æ—Ä ‚Äî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</h1></div>', unsafe_allow_html=True)

    tutor = EnhancedAITutor()

    # ---- –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±–ª–∞–∫–∞, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—à—å –ë–î) ----
    st.sidebar.markdown("### üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    user_id = st.sidebar.text_input("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (email/–Ω–∏–∫) –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", value="")

    # Session manager (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ; user_id –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ)
    session = SessionManager(user_id=user_id if user_id else None)

    # ---- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å: –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞ ----
    st.sidebar.header("üìñ –í—ã–±–æ—Ä –∫—É—Ä—Å–∞")
    subjects = list(tutor.playlists.keys())
    selected_subject = st.sidebar.selectbox("–ü—Ä–µ–¥–º–µ—Ç:", subjects, format_func=lambda x: f"{get_subject_emoji(x)} {x}")

    if selected_subject:
        grades = list(tutor.playlists[selected_subject].keys())
        selected_grade = st.sidebar.selectbox("–ö–ª–∞—Å—Å:", grades)

        if selected_grade:
            session.set_course(selected_subject, selected_grade)
            playlist_id = tutor.playlists[selected_subject][selected_grade]
            if st.sidebar.button("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", type="primary"):
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞..."):
                    videos = tutor.get_playlist_videos(playlist_id)
                    if videos:
                        session.start_course(videos)
                        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ")
                        st.rerun()
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞")

    # ---- –ü—Ä–æ–≥—Ä–µ—Å—Å ----
    st.sidebar.markdown("---")
    st.sidebar.header("üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å")
    progress_data = session.get_progress()
    st.sidebar.metric("–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ–º", len(progress_data.get("completed_topics", [])))
    chart_fig = create_progress_chart_data(progress_data)
    if chart_fig:
        st.sidebar.plotly_chart(chart_fig, use_container_width=True)

    # ---- –†–æ—É—Ç–∏–Ω–≥ ----
    stage = session.get_stage()
    if stage == "video":
        display_video_content(tutor, session)
    elif stage == "theory_test":
        show_theory_test(tutor, session)
    elif stage == "practice":
        show_practice_stage(tutor, session)
    else:
        st.info("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏ –∫–ª–∞—Å—Å –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ¬ª.")


def display_video_content(tutor: EnhancedAITutor, session: SessionManager):
    videos = session.get_videos()
    if not videos:
        st.warning("–í–∏–¥–µ–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        return
    current_video = videos[session.get_current_video_index()]

    col1, col2 = st.columns([2, 1], vertical_alignment="top")
    with col1:
        st.header(f"üì∫ {current_video['title']}")
        st.video(f"https://www.youtube.com/watch?v={current_video['video_id']}")
        if current_video.get('description'):
            with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞"):
                st.write(current_video['description'])

    with col2:
        st.markdown('<div class="progress-card">', unsafe_allow_html=True)
        st.markdown("### üéØ –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫")
        st.info(f"–£—Ä–æ–∫ {session.get_current_video_index() + 1} –∏–∑ {len(videos)}")
        st.progress((session.get_current_video_index() + 1) / max(1, len(videos)))

        col_btn1, col_btn2 = st.columns(2)
        with col_btn1:
            if st.button("–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç—É", type="primary"):
                session.set_stage("theory_test")
                log_user_action("start_theory_test", {"video": current_video['title']})
                st.rerun()
        with col_btn2:
            if st.button("–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å"):
                log_user_action("rewatch_video", {"video": current_video['title']})
                st.rerun()

        if session.get_current_video_index() > 0:
            if st.button("‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–∫"):
                session.prev_video()
                log_user_action("previous_video", {"video_index": session.get_current_video_index()})
                st.rerun()
        if session.get_current_video_index() < len(videos) - 1:
            if st.button("–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ‚Üí"):
                session.next_video()
                log_user_action("next_video", {"video_index": session.get_current_video_index()})
                st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)


def show_theory_test(tutor: EnhancedAITutor, session: SessionManager):
    current_video = session.get_videos()[session.get_current_video_index()]
    st.header("üìù –¢–µ—Å—Ç –ø–æ —Ç–µ–æ—Ä–∏–∏")
    st.info(f"–¢–µ–º–∞: {current_video['title']}")

    if 'theory_questions' not in st.session_state:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤‚Ä¶"):
            qn = int(APP_CONFIG.get("theory_questions_count", 5))
            data = tutor.generate_theory_questions(
                topic=current_video['title'],
                subject=session.get_subject(),
                grade=session.get_grade(),
                questions_count=qn
            )
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ DeepSeek
            if isinstance(data, dict) and data.get("error") in ("402", "deepseek_disabled", "timeout"):
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã (DeepSeek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                st.session_state.theory_questions = []
            else:
                if isinstance(data, dict) and 'content' in data:
                    try:
                        data = json.loads(data['content'])
                    except Exception:
                        data = {"questions": []}
                questions = data.get("questions", [])
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–æ–≤–Ω–æ qn –≤–æ–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ)
                questions = questions[:qn]
                while len(questions) < qn:
                    questions.append({
                        "question": "–í–æ–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                        "options": ["A) ‚Äî", "B) ‚Äî", "C) ‚Äî", "D) ‚Äî"],
                        "correct_answer": "A",
                        "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
                    })
                st.session_state.theory_questions = questions
            st.session_state.theory_answers = {}

    if st.session_state.theory_questions:
        for i, q in enumerate(st.session_state.theory_questions):
            st.markdown('<div class="task-card">', unsafe_allow_html=True)
            st.markdown(f"**–í–æ–ø—Ä–æ—Å {i+1}:** {q.get('question','')}", unsafe_allow_html=True)
            options = q.get('options', [])
            selected = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", options, key=f"theory_q_{i}", index=None)
            if selected:
                # —Ö—Ä–∞–Ω–∏–º ¬´–±—É–∫–≤—É¬ª (A/B/C/D)
                st.session_state.theory_answers[i] = (selected or "")[:1]
            st.markdown('</div>', unsafe_allow_html=True)

        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–∏–¥–µ–æ"):
                session.clear_theory_data()
                session.set_stage('video')
                log_user_action("return_to_video", {"video": current_video['title']})
                st.rerun()
        with col2:
            if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", type="primary"):
                if len(st.session_state.theory_answers) == len(st.session_state.theory_questions):
                    show_theory_results(tutor, session)
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def show_theory_results(tutor: EnhancedAITutor, session: SessionManager):
    current_video = session.get_videos()[session.get_current_video_index()]
    topic_key = f"{session.get_subject()}_{session.get_grade()}_{current_video['title']}"

    st.markdown('<div class="progress-card">', unsafe_allow_html=True)
    st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    correct_count = 0
    total_questions = len(st.session_state.theory_questions)

    for i, q in enumerate(st.session_state.theory_questions):
        user_ans = st.session_state.theory_answers.get(i)
        correct = (q.get('correct_answer') or "").strip()[:1]
        options = q.get("options", [])
        is_ok = compare_answers(user_ans, correct)

        if is_ok:
            correct_count += 1
            st.markdown('<div class="success-animation">', unsafe_allow_html=True)
            st.success(f"–í–æ–ø—Ä–æ—Å {i+1}: –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            st.markdown('</div>', unsafe_allow_html=True)
        else:
            st.error(f"–í–æ–ø—Ä–æ—Å {i+1}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        out = []
        for opt in options:
            label = (opt or "").strip()
            opt_letter = label[:1] if label else ""
            klass = ""
            if opt_letter == correct:
                klass = "choice choice-correct"
            elif user_ans and opt_letter == (user_ans[:1] if isinstance(user_ans, str) else user_ans):
                klass = "choice choice-wrong"
            if klass:
                out.append(f'<span class="{klass}">{label}</span>')
            else:
                out.append(f"{label}")
        st.markdown("<br>".join(out), unsafe_allow_html=True)

        exp = q.get('explanation', '')
        if exp:
            st.markdown(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {exp}", unsafe_allow_html=True)

    score = calculate_score(correct_count, total_questions)
    st.metric("–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç", f"{correct_count}/{total_questions} ({score:.0f}%)")
    session.save_theory_score(topic_key, score)

    if score < tutor.config.get("theory_pass_threshold", 60):
        st.warning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–º—ã")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫"):
            session.clear_theory_data()
            session.set_stage('video')
            log_user_action("rewatch_after_theory", {"video": current_video['title'], "score": score})
            st.rerun()
    with col2:
        if st.button("–ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", type="primary"):
            session.clear_theory_data()
            session.set_stage('practice')
            log_user_action("start_practice", {"video": current_video['title'], "theory_score": score})
            st.rerun()

    st.markdown('</div>', unsafe_allow_html=True)


def show_practice_stage(tutor: EnhancedAITutor, session: SessionManager):
    current_video = session.get_videos()[session.get_current_video_index()]

    st.header("üí™ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è")
    st.info(f"–¢–µ–º–∞: {current_video['title']}")

    st.markdown("""
<div class="notebook-note">
üìù <b>–°–æ–≤–µ—Ç:</b> –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ä–Ω–æ–≤–∏–∫. –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.
–î–ª—è –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤ ‚Äî <code>x >= 2</code> –∏–ª–∏ <code>[2, inf)</code>. –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π ‚Äî <code>and</code> –∏–ª–∏ <code>,</code>.
</div>
""", unsafe_allow_html=True)

    if 'practice_tasks' not in st.session_state:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π‚Ä¶"):
            theory_score = session.get_theory_score(current_video['title'])
            data = tutor.generate_practice_tasks(
                topic=current_video['title'],
                subject=session.get_subject(),
                grade=session.get_grade(),
                user_performance=theory_score
            )
            if isinstance(data, dict) and data.get("error") in ("402", "deepseek_disabled", "timeout"):
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è (DeepSeek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω).")
                st.session_state.practice_tasks = {"easy": [], "medium": [], "hard": []}
            else:
                if isinstance(data, dict) and "content" in data:
                    try:
                        data = json.loads(data["content"])
                    except Exception:
                        data = {"easy": [], "medium": [], "hard": []}
                st.session_state.practice_tasks = {
                    "easy": data.get("easy", []),
                    "medium": data.get("medium", []),
                    "hard": data.get("hard", []),
                }
            st.session_state.task_attempts = {}
            st.session_state.completed_tasks = []
            st.session_state.current_task_type = "easy"
            st.session_state.current_task_index = 0

    if any(len(st.session_state.practice_tasks.get(t, [])) for t in ["easy", "medium", "hard"]):
        show_current_task(tutor, session)
    else:
        st.error("–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å DeepSeek.")


def show_current_task(tutor: EnhancedAITutor, session: SessionManager):
    task_types = ["easy", "medium", "hard"]
    current_type = st.session_state.current_task_type
    current_index = st.session_state.current_task_index
    tasks_of_type = st.session_state.practice_tasks.get(current_type, [])

    if current_index >= len(tasks_of_type):
        curr_idx = task_types.index(current_type)
        if curr_idx < len(task_types) - 1:
            st.session_state.current_task_type = task_types[curr_idx + 1]
            st.session_state.current_task_index = 0
            st.rerun()
        else:
            show_practice_completion(tutor, session)
            return

    current_task = tasks_of_type[current_index]
    task_key = f"{current_type}_{current_index}"

    total_tasks = sum(len(st.session_state.practice_tasks.get(t, [])) for t in task_types)
    completed_tasks = len(st.session_state.completed_tasks)

    col1, col2 = st.columns([3, 1], vertical_alignment="top")
    with col2:
        st.markdown('<div class="progress-card">', unsafe_allow_html=True)
        st.markdown("### üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
        st.progress(completed_tasks / max(1, total_tasks))
        st.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", f"{completed_tasks}/{total_tasks}")
        st.markdown(
            f'<span class="difficulty-badge {current_type}">{tutor.ui_config["task_type_names"][current_type]}</span>',
            unsafe_allow_html=True
        )
        st.markdown(f"**–ó–∞–¥–∞–Ω–∏–µ:** {current_index + 1} –∏–∑ {len(tasks_of_type)}")
        st.markdown('</div>', unsafe_allow_html=True)

    with col1:
        st.markdown(
            f'<div class="task-card"><span class="difficulty-badge {current_type}">{tutor.ui_config["task_type_names"][current_type]}</span>',
            unsafe_allow_html=True
        )
        st.markdown(f"### –ó–∞–¥–∞–Ω–∏–µ {current_index + 1}")
        st.markdown(current_task.get("question", ""), unsafe_allow_html=True)

        user_answer = st.text_input("–í–∞—à –æ—Ç–≤–µ—Ç:", key=f"answer_{task_key}")
        attempts = st.session_state.task_attempts.get(task_key, 0)
        max_attempts = int(tutor.config.get("max_attempts_per_task", 3))

        if attempts < max_attempts:
            col_check, col_skip = st.columns([1, 1])
            with col_check:
                if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç", type="primary"):
                    if (user_answer or "").strip():
                        check_answer(tutor, session, current_task, user_answer, task_key)
                    else:
                        st.error("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç!")
            with col_skip:
                if st.button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):
                    log_user_action("skip_task", {"task_key": task_key})
                    move_to_next_task()
        else:
            st.error(f"–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ ({max_attempts})")
            if current_task.get("answer"):
                st.markdown(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {current_task.get('answer','')}", unsafe_allow_html=True)
            if current_task.get("solution"):
                st.markdown(f"**–†–µ—à–µ–Ω–∏–µ:** {current_task.get('solution','')}", unsafe_allow_html=True)
            if st.button("–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ"):
                move_to_next_task()

        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if task_key in st.session_state and 'hints' in st.session_state[task_key]:
            st.markdown("### üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:")
            for h in st.session_state[task_key]['hints']:
                st.info(h)

        st.markdown('</div>', unsafe_allow_html=True)


def check_answer(tutor: EnhancedAITutor, session: SessionManager, task: dict, user_answer: str, task_key: str):
    st.session_state.task_attempts[task_key] = st.session_state.task_attempts.get(task_key, 0) + 1
    attempts = st.session_state.task_attempts[task_key]
    max_attempts = int(tutor.config.get("max_attempts_per_task", 3))

    is_correct = compare_answers((user_answer or "").strip().lower(), (task.get("answer") or "").strip().lower())

    if is_correct:
        st.markdown('<div class="success-animation">', unsafe_allow_html=True)
        st.success("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞.")
        st.markdown('</div>', unsafe_allow_html=True)
        if task_key not in st.session_state.completed_tasks:
            st.session_state.completed_tasks.append(task_key)
        log_user_action("correct_answer", {"task_key": task_key, "attempts": attempts})
        if st.button("–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ"):
            move_to_next_task()
    else:
        if attempts < max_attempts:
            st.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ {attempts} –∏–∑ {max_attempts}")

            # 1) –õ–æ–∫–∞–ª—å–Ω–∞—è ¬´–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏¬ª
            diag = diagnose_mistake(user_answer, task.get("answer", ""))
            if task_key not in st.session_state:
                st.session_state[task_key] = {'hints': []}
            st.session_state[task_key]['hints'].append(diag)
            st.info(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {diag}")

            # 2) –î–æ–ø. –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç LLM (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if DEEPSEEK_ENABLED:
                with st.spinner("–ü–æ–ª—É—á–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É..."):
                    try:
                        hint_resp = tutor._call_deepseek_api(f"""
–°—Ç—É–¥–µ–Ω—Ç —Ä–µ—à–∞–ª –∑–∞–¥–∞—á—É: "{task.get('question','')}"
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: "{task.get('answer','')}"
–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: "{user_answer}"
–î–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) –±–µ–∑ LaTeX, —É–∫–∞–∂–∏, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ (–∑–Ω–∞–∫, —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ).
""")
                        if isinstance(hint_resp, dict) and 'content' in hint_resp:
                            st.session_state[task_key]['hints'].append(hint_resp['content'])
                            st.info(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint_resp['content']}")
                    except Exception:
                        pass

            log_user_action("incorrect_answer", {"task_key": task_key, "attempts": attempts})
        else:
            st.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.")
            if task.get("answer"):
                st.markdown(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {task.get('answer','')}", unsafe_allow_html=True)
            if task.get("solution"):
                st.markdown(f"**–†–µ—à–µ–Ω–∏–µ:** {task.get('solution','')}", unsafe_allow_html=True)
            if st.button("–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ"):
                move_to_next_task()


def move_to_next_task():
    st.session_state.current_task_index += 1
    st.rerun()


def show_practice_completion(tutor: EnhancedAITutor, session: SessionManager):
    videos = session.get_videos()
    if not videos:
        st.info("–ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return
    current_video = videos[session.get_current_video_index()]
    topic_key = f"{session.get_subject()}_{session.get_grade()}_{current_video['title']}"

    st.markdown('<div class="progress-card">', unsafe_allow_html=True)
    st.header("–ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    task_types = ["easy", "medium", "hard"]
    total_tasks = sum(len(st.session_state.practice_tasks.get(t, [])) for t in task_types)
    completed = len(st.session_state.completed_tasks)
    score = calculate_score(completed, total_tasks) if total_tasks else 0
    st.success(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {completed} –∏–∑ {total_tasks} –∑–∞–¥–∞–Ω–∏–π ({score:.0f}%)")

    session.save_practice_score(topic_key, completed, total_tasks)

    col1, col2 = st.columns(2)
    with col1:
        if st.button("–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É"):
            if session.next_video():
                session.set_stage('video')
                for k in ["practice_tasks", "task_attempts", "completed_tasks", "current_task_type", "current_task_index"]:
                    if k in st.session_state:
                        del st.session_state[k]
                log_user_action("next_topic", {"video_index": session.get_current_video_index()})
                st.rerun()
            else:
                st.info("–í—Å–µ —Ç–µ–º—ã –∫—É—Ä—Å–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    with col2:
        if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞"):
            session.set_stage('selection')
            for k in ["practice_tasks", "task_attempts", "completed_tasks", "current_task_type", "current_task_index"]:
                if k in st.session_state:
                    del st.session_state[k]
            log_user_action("return_to_selection", {})
            st.rerun()

    st.markdown(generate_progress_report(session.get_progress(), topic_key), unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)


if __name__ == "__main__":
    main()

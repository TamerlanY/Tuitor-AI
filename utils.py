import os
import json
import re
from datetime import datetime

import pandas as pd
import plotly.express as px
import streamlit as st

from config import APP_CONFIG, UI_CONFIG


def compare_answers(user_answer, correct_answer):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, —É—á–∏—Ç—ã–≤–∞—è —á–∏—Å–ª–∞, –º–Ω–æ–∂–µ—Å—Ç–≤–∞, –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞, –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏."""
    user_answer = str(user_answer or "").strip().lower()
    correct_answer = str(correct_answer or "").strip().lower()

    def replace_textual_operators(text):
        text = text.replace("–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ", ">=")
        text = text.replace("–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ", "<=")
        text = text.replace("–±–æ–ª—å—à–µ", ">")
        text = text.replace("–º–µ–Ω—å—à–µ", "<")
        return text

    user_answer = replace_textual_operators(user_answer)
    correct_answer = replace_textual_operators(correct_answer)

    def normalize_answer(answer):
        a = re.sub(r"\s+", "", answer)
        a = a.replace("infinity", "inf")
        return a

    ua = normalize_answer(user_answer)
    ca = normalize_answer(correct_answer)

    # –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞, –≤–æ–∑–º–æ–∂–Ω—ã —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if any(op in ua for op in ['>=', '<=', '>', '<']) or any(op in ca for op in ['>=', '<=', '>', '<']):
        user_parts = re.split(r'(?:and|or|,|;)', ua)
        correct_parts = re.split(r'(?:and|or|,|;)', ca)
        user_parts = sorted([p for p in user_parts if p])
        correct_parts = sorted([p for p in correct_parts if p])
        return user_parts == correct_parts

    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–±–µ–ª–æ–≤
    if any(c in ua for c in ['[', ']', '(', ')']) or any(c in ca for c in ['[', ']', '(', ')']):
        return ua == ca

    # –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    if ',' in ua or ',' in ca:
        u_set = set([x for x in ua.split(',') if x])
        c_set = set([x for x in ca.split(',') if x])
        return u_set == c_set

    # –î—Ä–æ–±–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1/2") vs —á–∏—Å–ª–∞
    if '/' in ua or '/' in ca:
        try:
            uval = eval(ua.replace("^", "**"))
            cval = eval(ca.replace("^", "**"))
            return abs(float(uval) - float(cval)) < 1e-6
        except Exception:
            pass

    # –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    return ua == ca


def calculate_score(correct, total):
    """–í—ã—á–∏—Å–ª—è–µ—Ç % –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."""
    return (correct / total * 100) if total > 0 else 0


def generate_progress_report(progress_data, topic_key):
    """HTML-–æ—Ç—á—ë—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ —Ç–µ–º–µ."""
    report = "<h3>üìà –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ</h3><ul>"
    topic_scores = progress_data.get("scores", {}).get(topic_key, {})

    if "theory_score" in topic_scores:
        report += f"<li>–¢–µ–æ—Ä–∏—è: {topic_scores['theory_score']:.0f}%</li>"
    if "practice_completed" in topic_scores:
        p = calculate_score(topic_scores.get('practice_completed', 0), topic_scores.get('practice_total', 1))
        report += f"<li>–ü—Ä–∞–∫—Ç–∏–∫–∞: {topic_scores.get('practice_completed', 0)}/{topic_scores.get('practice_total', 0)} ({p:.0f}%)</li>"
    report += f"<li>–î–∞—Ç–∞: {topic_scores.get('date', 'N/A')}</li>"
    report += "</ul>"
    return report


def get_subject_emoji(subject):
    """–≠–º–æ–¥–∑–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É."""
    emojis = {
        "–ê–ª–≥–µ–±—Ä–∞": "üî¢",
        "–ì–µ–æ–º–µ—Ç—Ä–∏—è": "üìê",
        "–§–∏–∑–∏–∫–∞": "‚öõÔ∏è",
        "–•–∏–º–∏—è": "üß™",
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫": "üá¨üáß"
    }
    return emojis.get(subject, "üìö")


class SessionManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.

    user_id: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—à—å –ë–î), —Å–µ–π—á–∞—Å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.
    """
    def __init__(self, user_id=None):
        self.user_id = user_id
        self.progress_file = APP_CONFIG.get("progress_file", "progress.json")

        if 'progress' not in st.session_state:
            st.session_state.progress = self.load_progress()
        if 'current_stage' not in st.session_state:
            st.session_state.current_stage = 'selection'
        if 'videos' not in st.session_state:
            st.session_state.videos = []
        if 'current_video_index' not in st.session_state:
            st.session_state.current_video_index = 0
        if 'selected_subject' not in st.session_state:
            st.session_state.selected_subject = None
        if 'selected_grade' not in st.session_state:
            st.session_state.selected_grade = None

    # ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ª–æ–∫–∞–ª—å–Ω–æ) ----------
    def load_progress(self):
        if os.path.exists(self.progress_file):
            try:
                with open(self.progress_file, "r", encoding="utf-8") as f:
                    return json.load(f)
            except Exception:
                pass
        return {"completed_topics": [], "scores": {}}

    def save_progress(self):
        try:
            with open(self.progress_file, "w", encoding="utf-8") as f:
                json.dump(st.session_state.progress, f, ensure_ascii=False, indent=2)
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")

    # ---------- –ö—É—Ä—Å ----------
    def set_course(self, subject, grade):
        st.session_state.selected_subject = subject
        st.session_state.selected_grade = grade

    def get_subject(self):
        return st.session_state.selected_subject

    def get_grade(self):
        return st.session_state.selected_grade

    def start_course(self, videos):
        st.session_state.videos = videos
        completed_titles = [t.split("_", 2)[-1] for t in st.session_state.progress["completed_topics"]
                            if t.startswith(f"{self.get_subject()}_{self.get_grade()}_")]
        start_index = 0
        for i, video in enumerate(videos):
            if video['title'] not in completed_titles:
                start_index = i
                break
        st.session_state.current_video_index = start_index
        st.session_state.current_stage = 'video'

    def get_videos(self):
        return st.session_state.videos

    def get_current_video_index(self):
        return st.session_state.current_video_index

    def prev_video(self):
        if st.session_state.current_video_index > 0:
            st.session_state.current_video_index -= 1

    def next_video(self):
        if st.session_state.current_video_index < len(st.session_state.videos) - 1:
            st.session_state.current_video_index += 1
            return True
        return False

    def set_stage(self, stage):
        st.session_state.current_stage = stage

    def get_stage(self):
        return st.session_state.current_stage

    def get_progress(self):
        return st.session_state.progress

    # ---------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ----------
    def save_theory_score(self, topic_key, score):
        if topic_key not in st.session_state.progress["scores"]:
            st.session_state.progress["scores"][topic_key] = {}
        st.session_state.progress["scores"][topic_key]["theory_score"] = score
        st.session_state.progress["scores"][topic_key]["date"] = datetime.now().isoformat()
        self.save_progress()

    def save_practice_score(self, topic_key, completed, total):
        if topic_key not in st.session_state.progress["completed_topics"]:
            st.session_state.progress["completed_topics"].append(topic_key)
        if topic_key not in st.session_state.progress["scores"]:
            st.session_state.progress["scores"][topic_key] = {}
        st.session_state.progress["scores"][topic_key]["practice_completed"] = completed
        st.session_state.progress["scores"][topic_key]["practice_total"] = total
        st.session_state.progress["scores"][topic_key]["date"] = datetime.now().isoformat()
        self.save_progress()

    def get_theory_score(self, video_title):
        topic_key = f"{self.get_subject()}_{self.get_grade()}_{video_title}"
        return st.session_state.progress["scores"].get(topic_key, {}).get("theory_score", None)

    def get_adaptive_difficulty(self):
        # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ‚Äî —Å–µ–π—á–∞—Å —Ç–µ–æ—Ä–∏—è –æ—Ç –Ω–µ–≥–æ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç
        current_video = self.get_videos()[self.get_current_video_index()]
        theory_score = self.get_theory_score(current_video['title'])
        if theory_score is None:
            return "medium"
        elif theory_score < 60:
            return "easy"
        elif theory_score > 85:
            return "hard"
        return "medium"

    def clear_theory_data(self):
        keys = ['theory_questions', 'theory_answers']
        for k in keys:
            if k in st.session_state:
                del st.session_state[k]

    def clear_practice_data(self):
        keys = ['practice_tasks', 'task_attempts', 'completed_tasks', 'current_task_type', 'current_task_index']
        for k in keys:
            if k in st.session_state:
                del st.session_state[k]


def create_progress_chart_data(progress_data):
    """–°—Ç—Ä–æ–∏—Ç Plotly-–≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    scores = progress_data.get("scores", {})
    if not scores:
        return None

    data = []
    for topic_key, score_info in scores.items():
        try:
            subject, grade, topic = topic_key.split("_", 2)
        except ValueError:
            subject, grade, topic = "?", "?", topic_key
        theory_score = score_info.get("theory_score", 0)
        practice_score = calculate_score(
            score_info.get("practice_completed", 0),
            score_info.get("practice_total", 1)
        )
        data.append({
            "–¢–µ–º–∞": f"{subject} {grade} ‚Äî {topic[:32]}{'‚Ä¶' if len(topic) > 32 else ''}",
            "–¢–µ–æ—Ä–∏—è (%)": theory_score,
            "–ü—Ä–∞–∫—Ç–∏–∫–∞ (%)": practice_score,
            "–î–∞—Ç–∞": score_info.get("date", "N/A")
        })

    df = pd.DataFrame(data)
    fig = px.bar(
        df,
        x="–¢–µ–º–∞",
        y=["–¢–µ–æ—Ä–∏—è (%)", "–ü—Ä–∞–∫—Ç–∏–∫–∞ (%)"],
        barmode="group",
        title="–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º",
        height=320
    )
    fig.update_layout(
        yaxis_title="–†–µ–∑—É–ª—å—Ç–∞—Ç (%)",
        legend_title="–¢–∏–ø",
        margin=dict(t=50, b=50)
    )
    return fig


def log_user_action(action, details):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª."""
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "action": action,
        "details": details
    }
    log_file = "user_actions.log"
    try:
        with open(log_file, "a", encoding="utf-8") as f:
            json.dump(log_entry, f, ensure_ascii=False)
            f.write("\n")
    except Exception:
        pass


# -------- –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ --------
def diagnose_mistake(user_answer: str, correct_answer: str) -> str:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –æ—à–∏–±–∫–∞:
    - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã vs —Å–∏–º–≤–æ–ª—ã (>=, <=, <, >)
    - —Ñ–æ—Ä–º–∞—Ç –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤/–∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    - –ø–æ—Ä—è–¥–æ–∫ –∫–æ—Ä–Ω–µ–π (–º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π)
    - –¥–µ—Å—è—Ç–∏—á–Ω–∞—è vs –¥—Ä–æ–±—å
    - –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    """
    ua_raw = (str(user_answer or "")).strip()
    ca_raw = (str(correct_answer or "")).strip()
    if not ua_raw:
        return "–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."

    def norm_ops(s: str) -> str:
        s = s.lower()
        s = s.replace("–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ", ">=").replace("–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ", "<=")
        s = s.replace("–±–æ–ª—å—à–µ", ">").replace("–º–µ–Ω—å—à–µ", "<")
        return s

    ua = norm_ops(ua_raw)
    ca = norm_ops(ca_raw)

    # –¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–æ–≤
    if any(x in ua_raw.lower() for x in ["–±–æ–ª—å—à–µ", "–º–µ–Ω—å—à–µ"]) and not any(op in ua for op in [">=", "<=", ">", "<"]):
        return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤: >=, <=, >, < (–Ω–µ –ø–∏—à–∏—Ç–µ –∏—Ö —Å–ª–æ–≤–∞–º–∏)."

    # –§–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if any(c in ua for c in "[]()") and not any(c in ca for c in "[]()"):
        return "–§–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç/—É—Å–ª–æ–≤–∏–µ, –∫–∞–∫ –≤ –∑–∞–¥–∞–Ω–∏–∏."
    if any(c in ca for c in "[]()") and not any(c in ua for c in "[]()"):
        return "–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü—Ä–∏–º–µ—Ä: [2, inf) –∏–ª–∏ (-inf, 3]."

    # –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    if "," in ua or "," in ca:
        us = sorted([x.strip() for x in ua.split(",") if x.strip()])
        cs = sorted([x.strip() for x in ca.split(",") if x.strip()])
        if set(us) == set(cs) and us != cs:
            return "–ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç, –Ω–æ —Ñ–æ—Ä–º–∞—Ç/–ø–æ—Ä—è–¥–æ–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –ø—Ä–æ–±–µ–ª—ã."
        if len(us) != len(cs):
            return "–ß–∏—Å–ª–æ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–ª–∏ –ª–∏—à–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."

    # –î–µ—Å—è—Ç–∏—á–Ω–∞—è vs –¥—Ä–æ–±—å
    if "/" in ua or "/" in ca:
        try:
            uval = eval(ua.replace("^", "**"))
            cval = eval(ca.replace("^", "**"))
            if abs(float(uval) - float(cval)) > 1e-6:
                return "–ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è."
            else:
                return "–ß–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ."
        except Exception:
            pass

    # –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
    if any(op in ua for op in [">=", "<=", ">", "<"]) and not any(op in ca for op in [">=", "<=", ">", "<"]):
        return "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –Ω–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ."
    if any(op in ca for op in [">=", "<=", ">", "<"]) and not any(op in ua for op in [">=", "<=", ">", "<"]):
        return "–û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, x >= 2). –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞–∫ –∏ –≥—Ä–∞–Ω–∏—Ü—É."

    return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: –∑–Ω–∞–∫–∏ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤, –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –ø–æ—Ä—è–¥–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π."

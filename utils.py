import os
import json
import re
from datetime import datetime

import pandas as pd
import plotly.express as px
import streamlit as st

from config import APP_CONFIG, UI_CONFIG

def compare_answers(user_answer, correct_answer):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, —É—á–∏—Ç—ã–≤–∞—è —á–∏—Å–ª–∞, –º–Ω–æ–∂–µ—Å—Ç–≤–∞, –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—à–∏–±–∫–∏."""
    user_answer = str(user_answer or "").strip().lower()
    correct_answer = str(correct_answer or "").strip().lower()

    def replace_textual_operators(text):
        text = text.replace("–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ", ">=")
        text = text.replace("–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ", "<=")
        text = text.replace("–±–æ–ª—å—à–µ", ">")
        text = text.replace("–º–µ–Ω—å—à–µ", "<")
        return text

    user_answer = replace_textual_operators(user_answer)
    correct_answer = replace_textual_operators(correct_answer)

    def normalize_answer(answer):
        answer = re.sub(r"\s+", "", answer)
        answer = answer.replace("infinity", "inf")
        answer = re.sub(r"[()]+", "", answer)
        return answer

    user_answer_norm = normalize_answer(user_answer)
    correct_answer_norm = normalize_answer(correct_answer)

    # –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
    if any(op in user_answer_norm for op in [">=", "<=", ">", "<"]):
        user_parts = re.split(r"(?:and|or|,|;)", user_answer_norm)
        correct_parts = re.split(r"(?:and|or|,|;)", correct_answer_norm)
        user_parts = sorted([p for p in user_parts if p])
        correct_parts = sorted([p for p in correct_parts if p])
        return user_parts == correct_parts

    # –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if any(c in user_answer for c in ["[", "]", "(", ")"]):
        return user_answer.replace(" ", "") == correct_answer.replace(" ", "")

    # –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    if "," in user_answer or "," in correct_answer:
        user_set = set(user_answer_norm.split(","))
        correct_set = set(correct_answer_norm.split(","))
        return user_set == correct_set

    # –¥—Ä–æ–±–∏ –∫–∞–∫ 1/2
    if "/" in user_answer:
        try:
            user_val = eval(user_answer)
            correct_val = eval(correct_answer)
            return abs(user_val - correct_val) < 1e-6
        except Exception:
            pass

    # –ø—Ä–æ—Å—Ç–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
    if correct_answer_norm in ["a", "b", "c", "d"]:
        return user_answer_norm == correct_answer_norm or user_answer_norm == correct_answer_norm[0]

    return user_answer_norm == correct_answer_norm


def calculate_score(correct, total):
    return (correct / total * 100) if total > 0 else 0


def generate_progress_report(progress_data, topic_key):
    report = "<h3>üìà –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ</h3><ul>"
    topic_scores = progress_data.get("scores", {}).get(topic_key, {})
    if "theory_score" in topic_scores:
        report += f"<li>–¢–µ–æ—Ä–∏—è: {topic_scores['theory_score']:.0f}%</li>"
    if "practice_completed" in topic_scores:
        prc = calculate_score(topic_scores.get("practice_completed", 0), topic_scores.get("practice_total", 1))
        report += f"<li>–ü—Ä–∞–∫—Ç–∏–∫–∞: {topic_scores['practice_completed']}/{topic_scores['practice_total']} ({prc:.0f}%)</li>"
    report += f"<li>–î–∞—Ç–∞: {topic_scores.get('date', 'N/A')}</li>"
    report += "</ul>"
    return report


def get_subject_emoji(subject):
    emojis = {
        "–ê–ª–≥–µ–±—Ä–∞": "üî¢",
        "–ì–µ–æ–º–µ—Ç—Ä–∏—è": "üìê",
        "–§–∏–∑–∏–∫–∞": "‚öõÔ∏è",
        "–•–∏–º–∏—è": "üß™",
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫": "üá¨üáß",
    }
    return emojis.get(subject, "üìö")


# ---------- –°–ê–ù–ò–¢–ê–ô–ó–ò–ù–ì –í–û–ü–†–û–°–û–í –¢–ï–û–†–ò–ò ----------

def _normalize_options(opts):
    """–ü—Ä–∏–≤–æ–¥–∏–º –∫ 4 –æ–ø—Ü–∏—è–º A/B/C/D –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç 'A) ...'."""
    opts = list(opts or [])
    # —Å—Ä–µ–∑–∞–µ–º –≤—Å—ë —á—Ç–æ –¥–ª–∏–Ω–Ω–µ–µ 4
    opts = opts[:4]
    # –¥–æ–±–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–º–∏, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 4
    while len(opts) < 4:
        opts.append("‚Äî")

    letters = ["A", "B", "C", "D"]
    fixed = []
    for i, raw in enumerate(opts[:4]):
        text = str(raw or "").strip()
        # –£–±–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ –ø—Ä–æ—Å—Ç–∞–≤–∏–º "A) ...":
        text = re.sub(r"^[A-Da-d][\)\.\:]\s*", "", text)
        fixed.append(f"{letters[i]}) {text if text else '‚Äî'}")
    return fixed


def sanitize_theory_questions(items):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —á–∏—Å—Ç–∏–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–æ—Ä–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    safe = []
    for q in items or []:
        question = str(q.get("question", "")).strip()
        options = _normalize_options(q.get("options"))
        correct = str(q.get("correct_answer", "")).strip().upper()
        if correct not in ["A", "B", "C", "D"]:
            # –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª–∞ '1','2','3','4' ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏–º
            if correct in ["1", "2", "3", "4"]:
                mapping = {"1": "A", "2": "B", "3": "C", "4": "D"}
                correct = mapping[correct]
            else:
                # –ø–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                # –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª–∞ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å
                correct = "A"  # –¥–µ—Ñ–æ–ª—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å

        explanation = str(q.get("explanation", "")).strip()
        if not question or not options or len(options) != 4:
            continue

        safe.append(
            {
                "question": question,
                "options": options,
                "correct_answer": correct,
                "explanation": explanation,
            }
        )
    return safe


# -------------- –°–µ—Å—Å–∏—è / –ø—Ä–æ–≥—Ä–µ—Å—Å --------------

class SessionManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º."""
    def __init__(self, user_id=None):
        self.user_id = user_id
        self.progress_file = APP_CONFIG["progress_file"]
        if "progress" not in st.session_state:
            st.session_state.progress = self.load_progress()
        if "current_stage" not in st.session_state:
            st.session_state.current_stage = "selection"
        if "videos" not in st.session_state:
            st.session_state.videos = []
        if "current_video_index" not in st.session_state:
            st.session_state.current_video_index = 0
        if "selected_subject" not in st.session_state:
            st.session_state.selected_subject = None
        if "selected_grade" not in st.session_state:
            st.session_state.selected_grade = None

    def load_progress(self):
        if os.path.exists(self.progress_file):
            try:
                with open(self.progress_file, "r", encoding="utf-8") as f:
                    return json.load(f)
            except Exception:
                pass
        return {"completed_topics": [], "scores": {}}

    def save_progress(self):
        try:
            with open(self.progress_file, "w", encoding="utf-8") as f:
                json.dump(st.session_state.progress, f, ensure_ascii=False, indent=2)
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")

    def set_course(self, subject, grade):
        st.session_state.selected_subject = subject
        st.session_state.selected_grade = grade

    def get_subject(self):
        return st.session_state.selected_subject

    def get_grade(self):
        return st.session_state.selected_grade

    def start_course(self, videos):
        st.session_state.videos = videos
        completed_titles = [
            t.split("_", 2)[-1]
            for t in st.session_state.progress["completed_topics"]
            if t.startswith(f"{self.get_subject()}_{self.get_grade()}_")
        ]
        start_index = 0
        for i, video in enumerate(videos):
            if video["title"] not in completed_titles:
                start_index = i
                break
        st.session_state.current_video_index = start_index
        st.session_state.current_stage = "video"

    def get_videos(self):
        return st.session_state.videos

    def get_current_video_index(self):
        return st.session_state.current_video_index

    def prev_video(self):
        if st.session_state.current_video_index > 0:
            st.session_state.current_video_index -= 1

    def next_video(self):
        if st.session_state.current_video_index < len(st.session_state.videos) - 1:
            st.session_state.current_video_index += 1
            return True
        return False

    def set_stage(self, stage):
        st.session_state.current_stage = stage

    def get_stage(self):
        return st.session_state.current_stage

    def get_progress(self):
        return st.session_state.progress

    def save_theory_score(self, topic_key, score):
        if topic_key not in st.session_state.progress["scores"]:
            st.session_state.progress["scores"][topic_key] = {}
        st.session_state.progress["scores"][topic_key]["theory_score"] = score
        st.session_state.progress["scores"][topic_key]["date"] = datetime.now().isoformat()
        self.save_progress()

    def save_practice_score(self, topic_key, completed, total):
        if topic_key not in st.session_state.progress["completed_topics"]:
            st.session_state.progress["completed_topics"].append(topic_key)
        if topic_key not in st.session_state.progress["scores"]:
            st.session_state.progress["scores"][topic_key] = {}
        st.session_state.progress["scores"][topic_key]["practice_completed"] = completed
        st.session_state.progress["scores"][topic_key]["practice_total"] = total
        st.session_state.progress["scores"][topic_key]["date"] = datetime.now().isoformat()
        self.save_progress()

    def get_theory_score(self, video_title):
        topic_key = f"{self.get_subject()}_{self.get_grade()}_{video_title}"
        return st.session_state.progress["scores"].get(topic_key, {}).get("theory_score", None)

    def get_adaptive_difficulty(self):
        current_video = self.get_videos()[self.get_current_video_index()]
        theory_score = self.get_theory_score(current_video["title"])
        if theory_score is None:
            return "medium"
        elif theory_score < 60:
            return "easy"
        elif theory_score > 85:
            return "hard"
        return "medium"

    def clear_theory_data(self):
        for key in ["theory_questions", "theory_answers"]:
            if key in st.session_state:
                del st.session_state[key]

    def clear_practice_data(self):
        for key in ["practice_tasks", "task_attempts", "completed_tasks", "current_task_type", "current_task_index"]:
            if key in st.session_state:
                del st.session_state[key]


def create_progress_chart_data(progress_data):
    scores = progress_data.get("scores", {})
    if not scores:
        return None
    data = []
    for topic_key, score_info in scores.items():
        subject, grade, topic = topic_key.split("_", 2)
        theory_score = score_info.get("theory_score", 0)
        practice_score = calculate_score(
            score_info.get("practice_completed", 0),
            score_info.get("practice_total", 1),
        )
        data.append(
            {
                "–¢–µ–º–∞": f"{subject} {grade} - {topic[:20]}...",
                "–¢–µ–æ—Ä–∏—è (%)": theory_score,
                "–ü—Ä–∞–∫—Ç–∏–∫–∞ (%)": practice_score,
                "–î–∞—Ç–∞": score_info.get("date", "N/A"),
            }
        )
    df = pd.DataFrame(data)
    fig = px.bar(df, x="–¢–µ–º–∞", y=["–¢–µ–æ—Ä–∏—è (%)", "–ü—Ä–∞–∫—Ç–∏–∫–∞ (%)"], barmode="group", title="–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º", height=300)
    fig.update_layout(yaxis_title="–†–µ–∑—É–ª—å—Ç–∞—Ç (%)", legend_title="–¢–∏–ø", margin=dict(t=50, b=50))
    return fig


def log_user_action(action, details):
    log_entry = {"timestamp": datetime.now().isoformat(), "action": action, "details": details}
    log_file = "user_actions.log"
    try:
        with open(log_file, "a", encoding="utf-8") as f:
            json.dump(log_entry, f, ensure_ascii=False)
            f.write("\n")
    except Exception:
        pass
